generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  SCHEDULED
  COMPLETED
  SKIPPED
  POSTPONED
  CANCELED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskSource {
  EMAIL
  MANUAL
  API
}

enum TaskEventType {
  CREATED
  SCHEDULED
  COMPLETED
  POSTPONED
  SKIPPED
  RESCHEDULED
  CANCELED
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String?  @unique
  emailVerified      DateTime?
  image              String?

  // Preferences
  timezone           String?  @default("UTC")
  workdayStartMin    Int?     @default(540)    // 9:00 (9*60)
  workdayEndMin      Int?     @default(1080)   // 18:00 (18*60)

  accounts           Account[]
  sessions           Session[]
  tasks              Task[]
  dailyReports       DailyReport[]
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id                       String       @id @default(cuid())
  userId                   String
  title                    String
  description              String?
  status                   TaskStatus   @default(PENDING)
  priority                 TaskPriority @default(MEDIUM)
  estimatedDurationMinutes Int          @default(30)
  source                   TaskSource   @default(MANUAL)
  emailMessageId           String?

  scheduledStart           DateTime?
  scheduledEnd             DateTime?

  // Calendar integration
  calendarEventId          String?
  calendarProvider         String?

  resources                TaskResource[]
  events                   TaskEvent[]

  createdAt                DateTime     @default(now())
  updatedAt                DateTime     @updatedAt

  user                     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, scheduledStart])
}

model TaskResource {
  id        String   @id @default(cuid())
  taskId    String
  title     String
  url       String
  metadata  Json?

  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model TaskEvent {
  id        String        @id @default(cuid())
  taskId    String
  type      TaskEventType
  reason    String?
  at        DateTime      @default(now())

  task      Task          @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model DailyReport {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  content   Json
  sentAt    DateTime?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}
